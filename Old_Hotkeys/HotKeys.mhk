//Maya Preference 2018 (Release 1)
//
//

//
// The runtime commands referenced by the hotkeys
//
runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\nimport maya.mel as mel\n\n\ncurveSelection = mc.keyframe(query=True, selected=True, name=True)\n\nif curveSelection:\n    mel.eval(\"isolateAnimCurve true graphEditor1FromOutliner graphEditor1GraphEd\")\n\nelse:\n    mel.eval(\"isolateAnimCurve false graphEditor1FromOutliner graphEditor1GraphEd\")")
	Isolate_animCurve;

runTimeCommand
	-annotation ""
	-category "Custom Scripts"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("ackToggleCams()")
	ToggleCam;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Selection"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("// return selected layer\nstring $Bob[] = `treeView -query -selectItem (\"AnimLayerTabanimLayerEditor\")`;\n// select layer\nanimLayerEditorOnSelect $Bob[0] 1;\n")
	ReselectAnimLayerBecauseTheySuck;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Locators"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("# Constrainted Locators - Ctrl + l\n\nimport maya.cmds as mc\n\ndef constrained_loc():\n    sel = mc.ls(sl=1)\n    sel_channels = mc.channelBox('mainChannelBox', q=1, sma=1)\n\n    channels_list = ['tx', 'ty', 'tz', 'rx', 'ry', 'rz']\n    skip_rot = []\n    skip_tran = []\n\n\n    if sel:\n        for obj in sel:\n\n            # Remove namespace, make loc\n            obj_nn = obj.rpartition(\":\")[2]\n            loc_name = obj_nn + \"_loc\"\n            loc = mc.spaceLocator(n=loc_name)[0]\n\n            # Use selection's rotateOrder\n            ro = mc.getAttr(obj + \".rotateOrder\")\n            mc.setAttr(loc + \".rotateOrder\", ro)\n\n            # Compare selected channels to list and append 'skipped' items to relevant list\n            if sel_channels:\n                for channel in channels_list:\n                    if channel not in sel_channels:\n                        if channel[0] == 't':\n                            skip_tran.append(channel[1])\n                        if channel[0] == 'r':\n                            skip_rot.append(channel[1])\n\n            mc.parentConstraint(obj, loc, skipRotate=skip_rot, skipTranslate=skip_tran)\n\n    else:\n        pass\n\n\nconstrained_loc()")
	Create_Locator_Constrained;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Viewport Animation"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("ackDeleteKey()")
	deleteKey;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Viewport Animation"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import pymel.core as pm\n\npm.ogs(p=True)\n")
	pause_viewport;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Viewport Animation"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("ogs -pause;")
	unPause_viewport;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Viewport Animation"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\ntimeSlider = mc.currentTime(q=1)\n\nminTime = mc.playbackOptions(q=1, minTime=1)\nmaxTime = mc.playbackOptions(q=1, maxTime=1)\n\nminTime = mc.playbackOptions(minTime=minTime+2)\nmaxTime = mc.playbackOptions(maxTime=maxTime-2)")
	Frame_Time_Slider_Shrink;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nsel = mc.ls(sl=1)\n\nmc.filterCurve(sel)")
	euler_filter;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as cmds\nimport maya.mel as mel\noPanel = cmds.getPanel(wf = True)\nif 'graphEditor' in oPanel:\n    maya.mel.eval('setToolTo latticeDeformKeySuperContext;')\n")
	My_Lattice_Deform_Keys;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Viewport Animation"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("ackToggleNURBSCurves()")
	Toggle_Curves;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nanimCurve = mc.keyframe(q=1, n=1)\n\nselKeyVal = mc.keyframe(q=1, sl=1, valueChange=1)\nfirstKeyIndex = mc.keyframe(q=1, indexValue=1)[0]\nlastKeyIndex = mc.keyframe(q=1, indexValue=1)[-1]\nprevKeyIndex = firstKeyIndex - 1\n\nprevKeyVal = mc.keyframe(animCurve, q=1, index=(prevKeyIndex,prevKeyIndex), valueChange=1)\n\nvalDiff = prevKeyVal[0] - selKeyVal[0]\n\nmc.keyframe(animCurve, e=1, index=(firstKeyIndex, lastKeyIndex), relative=1, valueChange=valDiff)\n\n")
	animCurveSnap;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Viewport Animation"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\ntimeSlider = mc.currentTime(q=1)\n\nminTime = mc.playbackOptions(q=1, minTime=1)\nmaxTime = mc.playbackOptions(q=1, maxTime=1)\n\nminTime = mc.playbackOptions(minTime=minTime-2)\nmaxTime = mc.playbackOptions(maxTime=maxTime+2)")
	Frame_TimeSlider_Grow;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nanimCurveNames = mc.keyframe(q=1, n=1)\n\ntry:\n    currentKey = int(mc.keyframe(q=1, sl=1)[0])\n    lastKey = mc.findKeyframe(animation=\"keys\", which=\"last\")\n\nexcept:\n    currentKey = mc.currentTime(q=1)\n    lastKey = mc.findKeyframe(animation=\"keysOrObjects\", which=\"last\")\n\n\nmc.selectKey(clear=1)\nfor curv in animCurveNames:\n    mc.selectKey(curv, add=1, k=1, time=(currentKey, lastKey))\n\n")
	here_and_after_keys;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Panels"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\nimport maya.mel as mel\n\nall_panels = mc.getPanel(vis=1)\n\ngraph_editors = [pan for pan in all_panels if \"graphEditor\" in pan]\n\nif graph_editors:\n    mc.deleteUI(graph_editors, panel=1)\n    \nelse:\n    mel.eval(\"GraphEditor;\")\n\n")
	graphEditor;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Locators"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("# Make Simple Locator - ;\n\nimport maya.cmds as mc\n\ndef simple_loc():\n    sel = mc.ls(sl=1)\n\n    if sel:\n        for obj in sel:\n\n            # Remove namespace, make loc\n            obj_nn = obj.rpartition(\":\")[2]\n            loc_name = obj_nn + \"_loc\"\n            loc = mc.spaceLocator(n=loc_name)[0]\n\n            # Use selection's rotateOrder\n            ro = mc.getAttr(obj + \".rotateOrder\")\n            mc.setAttr(loc + \".rotateOrder\", ro)\n\n            # Copy worldspace position\n            transforms = mc.xform(obj, q=1, ws=1, m=1)\n            mc.xform(loc, ws=1, m=transforms)\n\n            mc.select(loc)\n\n    else:\n        mc.spaceLocator(n=\"my_loc1\")\n        mc.select(clear=True)\n\n\nsimple_loc()")
	Create_Locator;
  
runTimeCommand
	-annotation "Locators_On_Off"
	-category "Custom Scripts.Locators"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("from mpc.maya.matchmoveTools.hotkeys import showToggle\nshowToggle.showToggle(arg='locators')")
	locators_toggle_command;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Selection"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("rig_animToolsSelectRigControls(`ls -sl`, \"\", \"\");")
	SelectRig;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nmc.selectKey(cl=1)\nmc.selectKey()")
	Select_AnimCurves;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Locators"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("# Locator as Local Child - Win + l\n\nimport maya.cmds as mc\n\ndef childed_loc():\n    sel = mc.ls(sl=1)\n\n    if sel:\n        for obj in sel:\n\n            # Remove namespace, make loc\n            obj_nn = obj.rpartition(\":\")[2]\n            loc_name = obj_nn + \"_loc\"\n            loc = mc.spaceLocator(n=loc_name)[0]\n\n            # Use selection's rotateOrder\n            ro = mc.getAttr(obj + \".rotateOrder\")\n            mc.setAttr(loc + \".rotateOrder\", ro)\n\n            # Put loc in parent of sel's space and copy attributes\n            parent_node = mc.pickWalk(obj, d=\"up\")\n\n            mc.parent(loc, parent_node, relative=1)\n            mc.copyAttr(obj, loc, values=1)\n\n    else:\n        pass\n\n\nchilded_loc()")
	Locator_as_local_child;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\ngraphEditorObjects = mc.selectionConnection('graphEditor1FromOutliner', q=1, object=1)\nmc.selectKey(graphEditorObjects)")
	Select_Active_animCurve;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Selection"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("// select objects on Layer\nstring $Bob[] = `treeView -query -selectItem (\"AnimLayerTabanimLayerEditor\")`;\nstring $layers[]={$Bob[0]}; layerEditorSelectObjectAnimLayer($layers);")
	SelectObjectsOnLayer;

runTimeCommand
	-annotation ""
	-category "Custom Scripts"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\nimport maya.mel as mel\n\nallWindows = mc.lsUI(type=\"window\")\n\nif 'ebLabs_worldSpace' in allWindows:\n    mc.deleteUI('ebLabs_worldSpace')\nelse:\n    #Call script here\n    mel.eval('ebLabs_worldSpace();')")
	WorldSpace_Tool;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Viewport Animation"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nsel = mc.ls(sl=1)\n\nappendix = ['.tx', '.ty', '.tz']\nnewSel = []\n\nchannels = mc.channelBox('mainChannelBox', q=1, sma=1)\n        \nif (channels is None) or (all(elem not in channels  for elem in ['tx', 'tz', 'ty'])):\n    for ctrl in sel:\n  \n        for each in appendix:\n        \n            newSel.append(ctrl + each)\n           \n    mc.channelBox('mainChannelBox', edit=1, select=newSel)\n    \nelif len(channels) == 3:\n    for ctrl in sel:\n        mc.channelBox('mainChannelBox', edit=1, select=ctrl + '.tx')\n        \nelif 'tx' in channels:    \n    for ctrl in sel:\n        mc.channelBox('mainChannelBox', edit=1, select=ctrl + '.ty')\n        \nelif 'ty' in channels:    \n    for ctrl in sel:\n        mc.channelBox('mainChannelBox', edit=1, select=ctrl + '.tz')\n        \nelif 'tz' in channels:\n        for ctrl in sel:\n    \n            for each in appendix:\n        \n                newSel.append(ctrl + each)\n            \n        mc.channelBox('mainChannelBox', edit=1, select=newSel)")
	Select_Translates;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Rigging"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nsel = mc.ls(sl=1)\nsel_channels = mc.channelBox('mainChannelBox', q=1, sma=1)\n\nchannels_list = ['tx', 'ty', 'tz', 'rx', 'ry', 'rz']\nskip_rot = []\nskip_tran = []\n\n\n\nif sel_channels:\n    for channel in channels_list:\n        if channel not in sel_channels:\n            if channel[0] == 't':\n                skip_tran.append(channel[1])\n            if channel[0] == 'r':\n                skip_rot.append(channel[1])\n\npCon = mc.parentConstraint(sel[0], sel[1], skipRotate=skip_rot, skipTranslate=skip_tran, mo=1)")
	Parent_Constrain_With_Offset;
  
runTimeCommand
	-annotation ""
	-category "Custom Scripts.Viewport Animation"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nsel = mc.ls(sl=1)\n\nappendix = ['.rx', '.ry', '.rz']\nnewSel = []\n\nchannels = mc.channelBox('mainChannelBox', q=1, sma=1)\n        \nif (channels is None) or (all(elem not in channels  for elem in ['rx', 'rz', 'ry'])):\n    for ctrl in sel:\n  \n        for each in appendix:\n        \n            newSel.append(ctrl + each)\n           \n    mc.channelBox('mainChannelBox', edit=1, select=newSel)\n    \nelif len(channels) == 3:\n    for ctrl in sel:\n        mc.channelBox('mainChannelBox', edit=1, select=ctrl + '.rx')\n        \nelif 'rx' in channels:    \n    for ctrl in sel:\n        mc.channelBox('mainChannelBox', edit=1, select=ctrl + '.ry')\n        \nelif 'ry' in channels:    \n    for ctrl in sel:\n        mc.channelBox('mainChannelBox', edit=1, select=ctrl + '.rz')\n        \nelif 'rz' in channels:\n        for ctrl in sel:\n    \n            for each in appendix:\n        \n                newSel.append(ctrl + each)\n            \n        mc.channelBox('mainChannelBox', edit=1, select=newSel)")
	Select_Rotates;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Panels"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as cmds\n\nbob = cmds.getPanel(vis=1)\n\ntry:\n    panel\nexcept NameError:\n    panel = None\n\n# delete outliner from scene if it's been dragged off and closed\nif cmds.window(\"myOutliner\", exists=1):\n    cmds.deleteUI(\"myOutliner\")\n    \n\nif panel in cmds.getPanel(vis=1):\n    Yup = \"Yep\"\n    cmds.deleteUI(myDoc)\n    \nelse:\n    # Create a new regular outliner in its own window\n\n    myWin = cmds.window(height=100, width=500)\n    #cmds.showWindow(myWin)\n\n    cmds.frameLayout( labelVisible=False )\n    panel = cmds.outlinerPanel()\n    outliner = cmds.outlinerPanel(panel, query=True,outlinerEditor=True)\n    cmds.outlinerEditor( outliner, edit=True, mainListConnection='worldList',\n    selectionConnection='modelList', showShapes=False, showReferenceNodes=False, showReferenceMembers=False, showAttributes=False, showConnected=False, showAnimCurvesOnly=False, autoExpand=False, showDagOnly=True, ignoreDagHierarchy=False, expandConnections=False, showNamespace=True, showCompounds=True, showNumericAttrsOnly=False, highlightActive=True, autoSelectNewObjects=False, doNotSelectNewObjects=False, transmitFilters=False, showSetMembers=True, setFilter='defaultSetFilter', ignoreHiddenAttribute=False, ignoreOutlinerColor=False )\n    #cmds.showWindow()\n    myDoc = \"myOutliner\"\n\n    cmds.dockControl(myDoc,\n                     allowedArea = [\"left\",\"right\"],\n                     area = \"left\",\n                     width=600,\n                     content = myWin,\n                     floating = False)\n\n\n")
	my_outliner;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Locators"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("# Locator as Controller - Ctrl + Shift + l\n\nimport maya.cmds as mc\n\ndef controller_loc():\n    sel = mc.ls(sl=1)\n    sel_channels = mc.channelBox('mainChannelBox', q=1, sma=1)\n\n    channels_list = ['tx', 'ty', 'tz', 'rx', 'ry', 'rz']\n    skip_rot = []\n    skip_tran = []\n\n    if sel:\n        for obj in sel:\n            # Get frame range from obj's keys\n            fullKeyList = sorted(mc.keyframe(obj, q=1))\n            firstLastKeys = fullKeyList[0], fullKeyList[-1]\n\n            # Remove namespace, make loc\n            obj_nn = obj.rpartition(\":\")[2]\n            loc_name = obj_nn + \"_loc\"\n            loc = mc.spaceLocator(n=loc_name)[0]\n\n            # Use selection's rotateOrder\n            ro = mc.getAttr(obj + \".rotateOrder\")\n            mc.setAttr(loc + \".rotateOrder\", ro)\n\n            # Compare selected channels to list and append 'skipped' items to relevant list\n            if sel_channels:\n                for channel in channels_list:\n                    if channel not in sel_channels:\n                        if channel[0] == 't':\n                            skip_tran.append(channel[1])\n                        if channel[0] == 'r':\n                            skip_rot.append(channel[1])\n\n            pCon = mc.parentConstraint(obj, loc, skipRotate=skip_rot, skipTranslate=skip_tran)\n\n            # Bake Controller Loc\n            mc.bakeResults(loc, time=firstLastKeys, attribute=sel_channels)\n            mc.delete(pCon)\n\n            pCon2 = mc.parentConstraint(loc, obj, w=1, skipRotate=skip_rot, skipTranslate=skip_tran)\n\ncontroller_loc()\n")
	Create_Locator_As_Ctrlr;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx "graphEditor"
	-commandLanguage "python"
	-command ("import maya.cmds as mc\nimport pymel.core as pm\n\nsel = mc.ls(sl=1)[0]\ncurve_name = mc.keyframe(sel, q=1, n=1, sl=1)\n\nkey = mc.keyframe(curve_name, q=1, sl=1, indexValue=1)[0]  # Get index\nkeyTime = cmds.keyframe(curve_name, q=True, index=(1, key))[-1]   # Get time from index\n\n\ntry:\n    cuv\nexcept:\n    cuv = None\n\nif cuv == None:\n   dup_cuv = mc.duplicate(curve_name, name=\"temp_animCurv\")\n   cuv = pm.ls(dup_cuv)[0]\n\nmc.selectKey(curve_name, index=(key, key))\ntime_change = keyTime - 1\n\nif pm.nodeType(cuv) == 'animCurveTL':\n    val = pm.nodetypes.AnimCurveTL.evaluate(cuv, time_change)\nelif pm.nodeType(cuv) == 'animCurveTA':\n    val = pm.nodetypes.AnimCurveTA.evaluate(cuv, time_change)\n    val = val * 57.29577951308232     # Need to mutiply by 1 radian for some reason\nelif pm.nodeType(cuv) == 'animCurveTU':\n    val = pm.nodetypes.AnimCurveTU.evaluate(cuv, time_change)\n\nmc.keyframe(animation='keys', option='over', absolute=True, timeChange=time_change, valueChange=val)")
	slide_key_left;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nmc.selectKey(clear=1)")
	clearGraphKeySelect;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Rigging"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nselObj = mc.ls(sl=1)\n\n# Delete Constraint\nchild_con = mc.listRelatives(selObj, children=1, type='constraint')\nmc.delete(child_con, constraints=1)")
	Delete_Constraint;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Rigging"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nsel = mc.ls(sl=1)\nsel_channels = mc.channelBox('mainChannelBox', q=1, sma=1)\n\nchannels_list = ['tx', 'ty', 'tz', 'rx', 'ry', 'rz']\nskip_rot = []\nskip_tran = []\n\n\n\nif sel_channels:\n    for channel in channels_list:\n        if channel not in sel_channels:\n            if channel[0] == 't':\n                skip_tran.append(channel[1])\n            if channel[0] == 'r':\n                skip_rot.append(channel[1])\n\npCon = mc.parentConstraint(sel[0], sel[1], skipRotate=skip_rot, skipTranslate=skip_tran, mo=0)")
	Parent_Constrain_no_offset;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Selection Filter"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setObjectPickMask \"All\" 0;\nsetObjectPickMask \"Curve\" true;")
	selection_filter_Curves;

runTimeCommand
	-annotation ""
	-category "Custom Scripts"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("ackToggleCams_setup;")
	ToggleCam_Setup;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Selection Filter"
	-hotkeyCtx ""
	-commandLanguage "mel"
	-command ("setObjectPickMask \"All\" 1;")
	selection_filter_All;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Panels"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\ntry:\n    if mc.ls(my_panel):\n        mc.deleteUI(my_panel, panel=True)\nexcept:\n    pass\n\nmy_panel = mc.modelPanel(camera=\"persp\")\nyep = mc.modelPanel(my_panel, edit=True, replacePanel='graphEditor1')")
	panel_tranform_modelP;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Panels"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\nimport maya.mel as mel\n\nfocus = mc.getPanel(wf=1)\ngraphEdit = mc.getPanel(scriptType='graphEditor')\n\nif not graphEdit:\n    graphEdit = mel.eval(\"GraphEditor;\")\n\nmc.scriptedPanel(graphEdit[0], edit=1, rp=focus)\n\nmc.animCurveEditor('graphEditor1GraphEd', exists=True)")
	panel_transform_graph;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Locators"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("# Locator as Local Controller - Win + Shift + l\n\nimport maya.cmds as mc\n\ndef controller_childed_loc():\n    sel = mc.ls(sl=1)\n    sel_channels = mc.channelBox('mainChannelBox', q=1, sma=1)\n\n    channels_list = ['tx', 'ty', 'tz', 'rx', 'ry', 'rz']\n\n\n    if sel:\n        for obj in sel:\n            # Get frame range from obj's keys\n            get_frame_range(obj)\n\n            # Remove namespace, make loc\n            loc_name = remove_namespace(obj)\n            loc = mc.spaceLocator(n=loc_name)[0]\n\n            # Put loc in parent of sel's space and copy attributes\n            find_parent_and_parent(obj, loc)\n\n            # Compare selected channels to list and append 'skipped' items to relevant list\n            skip_rot, skip_tran = find_channels_to_skip(channels_list)\n\n            #pCon = mc.parentConstraint(obj, loc, skipRotate=skip_rot, skipTranslate=skip_tran)\n            pCon = mc.parentConstraint(obj, loc)\n\n            # Bake Controller Loc\n            #mc.bakeResults(loc, time=firstLastKeys, attribute=sel_channels)\n            mc.bakeResults(loc, time=firstLastKeys)\n            mc.delete(pCon)\n\n            pCon2 = mc.parentConstraint(loc, obj, w=1, skipRotate=skip_rot, skipTranslate=skip_tran)\n            mc.select(loc)\n\ndef find_channels_to_skip(channels_list):\n    # Compare selected channels to list and append 'skipped' items to relevant list\n    sel_channels = mc.channelBox('mainChannelBox', q=1, sma=1)\n    skip_rot = []\n    skip_tran = []\n\n    if sel_channels:\n        for channel in channels_list:\n            if channel not in sel_channels:\n                if channel[0] == 't':\n                    skip_tran.append(channel[1])\n                if channel[0] == 'r':\n                    skip_rot.append(channel[1])\n\n    return skip_rot, skip_tran\n\n\ndef remove_namespace(obj):\n    obj_nn = obj.rpartition(\":\")[2]\n    loc_name = obj_nn + \"_loc\"\n\n    return loc_name\n\n\ndef get_frame_range(obj):\n    fullKeyList = sorted(mc.keyframe(obj, q=1) or [])\n    if fullKeyList != []:\n        firstLastKeys = fullKeyList[0], fullKeyList[-1]\n    else:\n        firstLastKeys = []\n\n    return firstLastKeys\n\n\ndef find_parent_and_parent(obj, loc):\n\n    parent_node = mc.pickWalk(obj, d=\"up\")[0]\n    # Parent unless it's parent is world\n    if parent_node != obj:\n        mc.parent(loc, parent_node, relative=1)\n\n    # Copy Attrs\n    mc.copyAttr(obj, loc, values=1)\n\n\ncontroller_childed_loc()\n")
	Locator_as_Local_Controller;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Graph Editor"
	-hotkeyCtx "graphEditor"
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\ncuv = None\n\ntry:  \n    mc.delete(\"temp_animCurv\")\nexcept:\n    pass")
	delete_slider_cuv;

runTimeCommand
	-annotation ""
	-category "Custom Scripts.Rigging"
	-hotkeyCtx ""
	-commandLanguage "python"
	-command ("import maya.cmds as mc\n\nselObj = mc.ls(sl=1)\n\n# Get Time Slider Range\nminTime = mc.playbackOptions(q=1, minTime=1)\nmaxTime = mc.playbackOptions(q=1, maxTime=1)\n\ntimeSliderRange = minTime, maxTime\n\n# Bake\nmc.bakeResults(selObj, t=timeSliderRange)\n\n# Delete Constraint\nchild_con = mc.listRelatives(selObj, children=1, type='constraint')\nmc.delete(child_con, constraints=1)")
	my_simple_bake;

//
// The name commands referenced by the hotkeys
//
nameCommand
	-annotation "Toggle_CurvesNameCommand"
	-sourceType "mel"
	-command ("Toggle_Curves")
	Toggle_CurvesNameCommand;

nameCommand
	-annotation "graphEditorNameCommand"
	-sourceType "mel"
	-command ("graphEditor")
	graphEditorNameCommand;

nameCommand
	-annotation "ToggleCam_SetupNameCommand"
	-sourceType "mel"
	-command ("ToggleCam_Setup")
	ToggleCam_SetupNameCommand;

nameCommand
	-annotation "ToggleCamNameCommand"
	-sourceType "mel"
	-command ("ToggleCam")
	ToggleCamNameCommand;

nameCommand
	-annotation "deleteKeyNameCommand"
	-sourceType "mel"
	-command ("deleteKey")
	deleteKeyNameCommand;

nameCommand
	-annotation "SelectRigNameCommand"
	-sourceType "mel"
	-command ("SelectRig")
	SelectRigNameCommand;

nameCommand
	-annotation "Clear Channel Box Selection - Clear channel selection in Channel Box so curves from Timeline are no longer filtered."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.channelBoxExtraTools_clearChannelBoxSelection();\");")
	animBot_channelBoxExtraTools_clearChannelBoxSelection;

nameCommand
	-annotation "Blend to Neighbors: 100% - That's probably the old aTools signature. Blend your current pose to the neighbor poses."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.tweenSlider_blendToNeighbors_100();\");")
	animBot_tweenSlider_blendToNeighbors_100;

nameCommand
	-annotation "Blend to Neighbors: -100% - That's probably the old aTools signature. Blend your current pose to the neighbor poses."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.tweenSlider_blendToNeighbors_neg100();\");")
	animBot_tweenSlider_blendToNeighbors_neg100;

nameCommand
	-annotation "Select_TranslatesNameCommand"
	-sourceType "mel"
	-command ("Select_Translates")
	Select_TranslatesNameCommand;

nameCommand
	-annotation "Select_RotatesNameCommand"
	-sourceType "mel"
	-command ("Select_Rotates")
	Select_RotatesNameCommand;

nameCommand
	-annotation "selection_filter_AllNameCommand"
	-sourceType "mel"
	-command ("selection_filter_All")
	selection_filter_AllNameCommand;

nameCommand
	-annotation "selection_filter_CurvesNameCommand"
	-sourceType "mel"
	-command ("selection_filter_Curves")
	selection_filter_CurvesNameCommand;

nameCommand
	-annotation "euler_filterNameCommand"
	-sourceType "mel"
	-command ("euler_filter")
	euler_filterNameCommand;

nameCommand
	-annotation "Global Offset - Changes will propagate to the whole animation."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.globalOffset_globalOffset();\");")
	animBot_globalOffset_globalOffset;

nameCommand
	-annotation "WorldSpace_ToolNameCommand"
	-sourceType "mel"
	-command ("WorldSpace_Tool")
	WorldSpace_ToolNameCommand;

nameCommand
	-annotation "Frame_TimeSlider_GrowNameCommand"
	-sourceType "mel"
	-command ("Frame_TimeSlider_Grow")
	Frame_TimeSlider_GrowNameCommand;

nameCommand
	-annotation "Frame_Time_Slider_ShrinkNameCommand"
	-sourceType "mel"
	-command ("Frame_Time_Slider_Shrink")
	Frame_Time_Slider_ShrinkNameCommand;

nameCommand
	-annotation "ReselectAnimLayerBecauseTheySuckNameCommand"
	-sourceType "mel"
	-command ("ReselectAnimLayerBecauseTheySuck")
	ReselectAnimLayerBecauseTheySuckNameCommand;

nameCommand
	-annotation "SelectObjectsOnLayerNameCommand"
	-sourceType "mel"
	-command ("SelectObjectsOnLayer")
	SelectObjectsOnLayerNameCommand;

nameCommand
	-annotation "Set Smart Key - Set keys and keep tangents types intact."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.animCurveExtraTools_setSmartKey();\");")
	animBot_animCurveExtraTools_setSmartKey;

nameCommand
	-annotation "PlaybackToggleNameCommand"
	-sourceType "mel"
	-command ("PlaybackToggle")
	PlaybackToggleNameCommand;

nameCommand
	-annotation "GoToMinFrameNameCommand"
	-sourceType "mel"
	-command ("GoToMinFrame")
	GoToMinFrameNameCommand;

nameCommand
	-annotation "PlayblastWindowNameCommand"
	-sourceType "mel"
	-command ("PlayblastWindow")
	PlayblastWindowNameCommand;

nameCommand
	-annotation "PlayblastOptionsNameCommand"
	-sourceType "mel"
	-command ("PlayblastOptions")
	PlayblastOptionsNameCommand;

nameCommand
	-annotation "Select_AnimCurvesNameCommand"
	-sourceType "mel"
	-command ("Select_AnimCurves")
	Select_AnimCurvesNameCommand;

nameCommand
	-annotation "Isolate_animCurveNameCommand"
	-sourceType "mel"
	-command ("Isolate_animCurve")
	Isolate_animCurveNameCommand;

nameCommand
	-annotation "Smart Snap Keys - Snap keys in a non-destructive manner."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.animCurveExtraTools_smartSnapKeys();\");")
	animBot_animCurveExtraTools_smartSnapKeys;

nameCommand
	-annotation "WS_LocatorNameCommand"
	-sourceType "mel"
	-command ("Create_Locator_As_Ctrlr")
	WS_LocatorNameCommand;

nameCommand
	-annotation "Smooth Rough: -100% - Soften your animation curve or make it harsh."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.keySlider_smoothRough_neg100();\");")
	animBot_keySlider_smoothRough_neg100;

nameCommand
	-annotation "Simplify Bake Keys: -5% - Simplify (remove keys) or bake (add keys) your animation curve."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.keySlider_simplifyBakeKeys_neg5();\");")
	animBot_keySlider_simplifyBakeKeys_neg5;

nameCommand
	-annotation "My_Lattice_Deform_KeysNameCommand"
	-sourceType "mel"
	-command ("My_Lattice_Deform_Keys")
	My_Lattice_Deform_KeysNameCommand;

nameCommand
	-annotation "Create_Constrained_LocatorNameCommand"
	-sourceType "mel"
	-command ("Create_Locator_Constrained")
	Create_Constrained_LocatorNameCommand;

nameCommand
	-annotation "my_simple_bakeNameCommand"
	-sourceType "mel"
	-command ("my_simple_bake")
	my_simple_bakeNameCommand;

nameCommand
	-annotation "Create_LocatorNameCommand"
	-sourceType "mel"
	-command ("Create_Locator")
	Create_LocatorNameCommand;

nameCommand
	-annotation "Parent_Constrain_no_offsetNameCommand"
	-sourceType "mel"
	-command ("Parent_Constrain_no_offset")
	Parent_Constrain_no_offsetNameCommand;

nameCommand
	-annotation "Parent_Constrain_With_OffsetNameCommand"
	-sourceType "mel"
	-command ("Parent_Constrain_With_Offset")
	Parent_Constrain_With_OffsetNameCommand;

nameCommand
	-annotation "Delete_ConstraintNameCommand"
	-sourceType "mel"
	-command ("Delete_Constraint")
	Delete_ConstraintNameCommand;

nameCommand
	-annotation "Locators_On_Off"
	-sourceType "mel"
	-command ("locators_toggle_command")
	Locators_On_OffNameCommand;

nameCommand
	-annotation "Screen Z Manipulation"
	-sourceType "mel"
	-command ("python(\"screenZManipulator.screenZManipulator(fromWhere='hotKey')\")")
	screenZManipulatorNameCommand;

nameCommand
	-annotation "my_outlinerNameCommand"
	-sourceType "mel"
	-command ("my_outliner")
	my_outlinerNameCommand;

nameCommand
	-annotation "here_and_after_keysNameCommand"
	-sourceType "mel"
	-command ("here_and_after_keys")
	here_and_after_keysNameCommand;

nameCommand
	-annotation "clearGraphKeySelectNameCommand"
	-sourceType "mel"
	-command ("clearGraphKeySelect")
	clearGraphKeySelectNameCommand;

nameCommand
	-annotation "animCurveSnapNameCommand"
	-sourceType "mel"
	-command ("animCurveSnap")
	animCurveSnapNameCommand;

nameCommand
	-annotation "Select_Active_animCurveNameCommand"
	-sourceType "mel"
	-command ("Select_Active_animCurve")
	Select_Active_animCurveNameCommand;

nameCommand
	-annotation "panel_transform_graphNameCommand"
	-sourceType "mel"
	-command ("panel_transform_graph")
	panel_transform_graphNameCommand;

nameCommand
	-annotation "panel_tranform_modelPNameCommand"
	-sourceType "mel"
	-command ("panel_tranform_modelP")
	panel_tranform_modelPNameCommand;

nameCommand
	-annotation "Smart Go to Next Keyframe - Go to next keyframe faster and select it, without storing undo. Will also play the audio."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.animCurveExtraTools_smartGoToNextKeyframe();\");")
	animBot_animCurveExtraTools_smartGoToNextKeyframe;

nameCommand
	-annotation "Smart Go to Next Frame - Go to next frame faster without storing undo. Will also play the audio."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.animCurveExtraTools_smartGoToNextFrame();\");")
	animBot_animCurveExtraTools_smartGoToNextFrame;

nameCommand
	-annotation "Sliders Pop Up - A convenient pop up window to use animBot Sliders on the spot."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.globalTools_slidersPopUp();\");")
	animBot_globalTools_slidersPopUp;

nameCommand
	-annotation "Mirror to Left - Mirror a pose exclusively to the left side rig controls."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.mirror_mirrorToLeft();\");")
	animBot_mirror_mirrorToLeft;

nameCommand
	-annotation "Smart Go to Previous Frame - Go to previous frame faster and select it, without storing undo. Will also play the audio."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.animCurveExtraTools_smartGoToPreviousFrame();\");")
	animBot_animCurveExtraTools_smartGoToPreviousFrame;

nameCommand
	-annotation "Smart Go to Previous Keyframe - Go to previous keyframe faster without storing undo. Will also play the audio."
	-sourceType "mel"
	-command ("python(\"from animBot._api.core import CORE as ANIMBOT_CORE; ANIMBOT_CORE.trigger.animCurveExtraTools_smartGoToPreviousKeyframe();\");")
	animBot_animCurveExtraTools_smartGoToPreviousKeyframe;

nameCommand
	-annotation "pause_viewportNameCommand"
	-sourceType "mel"
	-command ("pause_viewport")
	pause_viewportNameCommand;

nameCommand
	-annotation "unPause_viewportNameCommand"
	-sourceType "mel"
	-command ("unPause_viewport")
	unPause_viewportNameCommand;

nameCommand
	-annotation "MoveNearestPickedKeyToolActivateNameCommand"
	-sourceType "mel"
	-command ("MoveNearestPickedKeyToolActivate")
	MoveNearestPickedKeyToolActivateNameCommand;

nameCommand
	-annotation "AddKeyToolActivateNameCommand"
	-sourceType "mel"
	-command ("AddKeyToolActivate")
	AddKeyToolActivateNameCommand;

nameCommand
	-annotation "InsertKeyToolActivateNameCommand"
	-sourceType "mel"
	-command ("InsertKeyToolActivate")
	InsertKeyToolActivateNameCommand;

nameCommand
	-annotation "Locator_as_Local_ControllerNameCommand"
	-sourceType "mel"
	-command ("Locator_as_Local_Controller")
	Locator_as_Local_ControllerNameCommand;

nameCommand
	-annotation "Locator_as_local_childNameCommand"
	-sourceType "mel"
	-command ("Locator_as_local_child")
	Locator_as_local_childNameCommand;

nameCommand
	-annotation "RegionKeysToolNameCommand"
	-sourceType "mel"
	-command ("RegionKeysTool")
	RegionKeysToolNameCommand;

nameCommand
	-annotation "TimeDraggerToolActivateNameCommand"
	-sourceType "mel"
	-command ("TimeDraggerToolActivate")
	TimeDraggerToolActivateNameCommand;

nameCommand
	-annotation "TimeDraggerToolDeactivateNameCommand"
	-sourceType "mel"
	-command ("TimeDraggerToolDeactivate")
	TimeDraggerToolDeactivateNameCommand;

nameCommand
	-annotation "slide_key_leftNameCommand"
	-sourceType "mel"
	-command ("slide_key_left")
	slide_key_leftNameCommand;

nameCommand
	-annotation "delete_slider_cuvNameCommand"
	-sourceType "mel"
	-command ("delete_slider_cuv")
	delete_slider_cuvNameCommand;

nameCommand
	-annotation "PinSelectionNameCommand"
	-sourceType "mel"
	-command ("PinSelection")
	PinSelectionNameCommand;

//
// The user hotkeys
//
//
// The hotkey set
//
hotkeySet -source "Maya_Default" -current J_keys_mpc8_2022;
//
// The hotkey contexts and hotkeys
//
hotkey -keyShortcut "y" -sht -name ("");
hotkey -keyShortcut "w" -alt -name ("clearGraphKeySelectNameCommand");
hotkey -keyShortcut "@" -name ("SelectObjectsOnLayerNameCommand");
hotkey -keyShortcut "f" -ctl -name ("Select_AnimCurvesNameCommand");
hotkey -keyShortcut "x" -alt -sht -name ("ToggleCam_SetupNameCommand");
hotkey -keyShortcut "w" -ctl -sht -releaseName ("pause_viewportNameCommand");
hotkey -keyShortcut "l" -cmd -sht -name ("Locator_as_Local_ControllerNameCommand");
hotkey -keyShortcut "w" -ctl -sht -name ("unPause_viewportNameCommand");
hotkey -keyShortcut "s" -ctl -sht -name ("animBot_animCurveExtraTools_smartSnapKeys");
hotkey -keyShortcut "u" -cmd -name ("");
hotkey -keyShortcut "s" -ctl -sht -releaseName ("");
hotkey -keyShortcut "k" -ctl -name ("Delete_ConstraintNameCommand");
hotkey -keyShortcut "#" -releaseName ("");
hotkey -keyShortcut "#" -name ("");
hotkey -keyShortcut "." -alt -releaseName ("");
hotkey -keyShortcut "$" -name ("selection_filter_CurvesNameCommand");
hotkey -keyShortcut "." -alt -name ("animBot_animCurveExtraTools_smartGoToNextFrame");
hotkey -keyShortcut "2" -alt -name ("WorldSpace_ToolNameCommand");
hotkey -keyShortcut "k" -name ("");
hotkey -keyShortcut "k" -releaseName ("");
hotkey -keyShortcut "l" -name ("Locators_On_OffNameCommand");
hotkey -keyShortcut "s" -name ("animBot_animCurveExtraTools_setSmartKey");
hotkey -keyShortcut "s" -releaseName ("");
hotkey -keyShortcut "l" -ctl -sht -name ("WS_LocatorNameCommand");
hotkey -keyShortcut "k" -ctl -sht -name ("Parent_Constrain_no_offsetNameCommand");
hotkey -keyShortcut "2" -name ("deleteKeyNameCommand");
hotkey -keyShortcut "e" -cmd -releaseName ("");
hotkey -keyShortcut "2" -releaseName ("");
hotkey -keyShortcut "g" -sht -name ("animBot_channelBoxExtraTools_clearChannelBoxSelection");
hotkey -keyShortcut "e" -cmd -name ("InsertKeyToolActivateNameCommand");
hotkey -keyShortcut "g" -sht -releaseName ("");
hotkey -keyShortcut "c" -ctl -alt -sht -name ("animCurveSnapNameCommand");
hotkey -keyShortcut "f" -alt -sht -name ("Toggle_CurvesNameCommand");
hotkey -keyShortcut "8" -name ("");
hotkey -keyShortcut "i" -name ("");
hotkey -keyShortcut "i" -releaseName ("");
hotkey -keyShortcut "e" -alt -name ("euler_filterNameCommand");
hotkey -keyShortcut "^" -name ("panel_tranform_modelPNameCommand");
hotkey -keyShortcut "g" -alt -name ("");
hotkey -keyShortcut "t" -ctl -name ("Frame_TimeSlider_GrowNameCommand");
hotkey -keyShortcut "1" -name ("");
hotkey -keyShortcut "1" -alt -name ("Isolate_animCurveNameCommand");
hotkey -keyShortcut "w" -cmd -name ("MoveNearestPickedKeyToolActivateNameCommand");
hotkey -keyShortcut "s" -alt -name ("animBot_keySlider_smoothRough_neg100");
hotkey -keyShortcut "s" -alt -releaseName ("");
hotkey -keyShortcut "r" -ctl -name ("My_Lattice_Deform_KeysNameCommand");
hotkey -keyShortcut "q" -alt -name ("deleteKeyNameCommand");
hotkey -keyShortcut "q" -alt -releaseName ("");
hotkey -keyShortcut "r" -sht -releaseName ("TimeDraggerToolDeactivateNameCommand");
hotkey -keyShortcut "f" -alt -name ("Select_Active_animCurveNameCommand");
hotkey -keyShortcut "1" -ctl -name ("screenZManipulatorNameCommand");
hotkey -keyShortcut "r" -sht -name ("TimeDraggerToolActivateNameCommand");
hotkey -keyShortcut "c" -sht -releaseName ("");
hotkey -keyShortcut "o" -alt -sht -name ("");
hotkey -keyShortcut "c" -sht -name ("animBot_tweenSlider_blendToNeighbors_neg100");
hotkey -keyShortcut "c" -releaseName ("");
hotkey -keyShortcut "c" -name ("");
hotkey -keyShortcut "c" -alt -name ("GoToMinFrameNameCommand");
hotkey -keyShortcut "t" -name ("NameComShowManip_Tool");
hotkey -keyShortcut "t" -releaseName ("");
hotkey -keyShortcut "v" -sht -releaseName ("");
hotkey -keyShortcut "v" -sht -name ("animBot_tweenSlider_blendToNeighbors_100");
hotkey -keyShortcut "Ins" -name ("PlayblastWindowNameCommand");
hotkey -keyShortcut "i" -alt -name ("");
hotkey -keyShortcut "!" -name ("ReselectAnimLayerBecauseTheySuckNameCommand");
hotkey -keyShortcut "f" -ctl -sht -name ("here_and_after_keysNameCommand");
hotkey -keyShortcut "l" -ctl -name ("Create_Constrained_LocatorNameCommand");
hotkey -keyShortcut "," -releaseName ("");
hotkey -keyShortcut "," -name ("animBot_animCurveExtraTools_smartGoToPreviousKeyframe");
hotkey -keyShortcut "g" -alt -sht -name ("graphEditorNameCommand");
hotkey -keyShortcut "v" -releaseName ("");
hotkey -keyShortcut "`" -releaseName ("");
hotkey -keyShortcut "v" -name ("PlaybackToggleNameCommand");
hotkey -keyShortcut "`" -name ("animBot_globalOffset_globalOffset");
hotkey -keyShortcut "w" -sht -name ("Select_TranslatesNameCommand");
hotkey -keyShortcut "w" -ctl -releaseName ("");
hotkey -keyShortcut "&" -name ("panel_transform_graphNameCommand");
hotkey -keyShortcut "w" -ctl -name ("");
hotkey -keyShortcut "7" -ctl -name ("");
hotkey -keyShortcut "%" -name ("selection_filter_AllNameCommand");
hotkey -keyShortcut "\\" -releaseName ("TogglePanZoomReleaseNameCommand");
hotkey -keyShortcut "\\" -name ("TogglePanZoomPressNameCommand");
hotkey -keyShortcut "Home" -name ("PlayblastOptionsNameCommand");
hotkey -keyShortcut "o" -name ("my_outlinerNameCommand");
hotkey -keyShortcut "o" -releaseName ("");
hotkey -keyShortcut "k" -sht -name ("Parent_Constrain_With_OffsetNameCommand");
hotkey -keyShortcut "e" -sht -name ("Select_RotatesNameCommand");
hotkey -keyShortcut "f" -ctl -alt -name ("");
hotkey -keyShortcut "c" -alt -sht -name ("ToggleCamNameCommand");
hotkey -keyShortcut "," -alt -releaseName ("");
hotkey -keyShortcut "b" -sht -releaseName ("");
hotkey -keyShortcut "l" -cmd -name ("Locator_as_local_childNameCommand");
hotkey -keyShortcut "," -alt -name ("animBot_animCurveExtraTools_smartGoToPreviousFrame");
hotkey -keyShortcut "b" -sht -name ("animBot_keySlider_simplifyBakeKeys_neg5");
hotkey -keyShortcut "9" -alt -releaseName ("");
hotkey -keyShortcut "8" -ctl -name ("");
hotkey -keyShortcut "9" -alt -name ("animBot_mirror_mirrorToLeft");
hotkey -keyShortcut "q" -cmd -name ("AddKeyToolActivateNameCommand");
hotkey -keyShortcut ";" -name ("Create_LocatorNameCommand");
hotkey -keyShortcut "v" -alt -name ("");
hotkey -keyShortcut "]" -name ("");
hotkey -keyShortcut "." -releaseName ("");
hotkey -keyShortcut "v" -alt -sht -name ("");
hotkey -keyShortcut "." -name ("animBot_animCurveExtraTools_smartGoToNextKeyframe");
hotkey -keyShortcut "t" -ctl -alt -name ("Frame_Time_Slider_ShrinkNameCommand");
hotkey -keyShortcut "f" -sht -name ("SelectRigNameCommand");
hotkey -keyShortcut "9" -releaseName ("");
hotkey -keyShortcut "9" -name ("animBot_globalTools_slidersPopUp");
hotkey -keyShortcut "b" -ctl -name ("my_simple_bakeNameCommand");
hotkey -keyShortcut "p" -name ("PinSelectionNameCommand");
hotkey -keyShortcut "[" -name ("");
hotkeyCtx -type "Editor" -addClient "hyperShadePanel";
hotkeyCtx -type "Editor" -addClient "nodeEditorPanel";
hotkeyCtx -type "Editor" -addClient "graphEditor";
hotkey -keyShortcut "p" -ctl -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "4" -name ("slide_key_leftNameCommand");
hotkey -keyShortcut "1" -name ("GraphEditorAbsoluteViewNameCommand");
hotkey -keyShortcut "j" -cmd -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "h" -cmd -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "r" -ctl -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "$" -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "5" -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "`" -name ("delete_slider_cuvNameCommand");
hotkey -keyShortcut "/" -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "0" -ctl -alt -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "-" -ctl -name ("") -ctxClient "graphEditor";
hotkey -keyShortcut "r" -name ("RegionKeysToolNameCommand");
hotkeyCtx -type "Editor" -addClient "timeEditorPanel";
hotkey -keyShortcut "r" -sht -name ("TimeEditorToggleTimeCursorPressNameCommand");
hotkey -keyShortcut "k" -name ("") -ctxClient "timeEditorPanel";
hotkeyCtx -type "Editor" -addClient "profilerPanel";
hotkeyCtx -type "Editor" -addClient "hyperGraphPanel";
hotkeyCtx -type "Editor" -addClient "posePanel";
hotkeyCtx -type "Editor" -addClient "shapePanel";
hotkeyCtx -type "Editor" -addClient "polyTexturePlacementPanel";
hotkey -keyShortcut "/" -name ("") -ctxClient "polyTexturePlacementPanel";
hotkeyCtx -type "Editor" -addClient "outlinerPanel";
hotkeyCtx -type "Tool" -addClient "sculptMeshCache";
hotkeyCtx -type "Tool" -addClient "texCutContext";
hotkeyCtx -type "Tool" -addClient "polyCutUV";
hotkeyCtx -type "Tool" -addClient "texSculptCacheContext";
hotkeyCtx -type "Tool" -addClient "xgmIGBrush";
hotkeyCtx -type "Tool" -addClient "Unfold3DBrush";
hotkeyCtx -type "Tool" -addClient "SymmetrizeUVBrush";
